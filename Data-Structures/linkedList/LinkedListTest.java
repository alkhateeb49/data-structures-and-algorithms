/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package New.link;

import org.junit.Test;
import static org.junit.Assert.*;

public class LibraryTest {
    @Test
    public void testInsert() {
        LinkedList newLink = new LinkedList();
        newLink.insert(5);
        newLink.insert(6);
        newLink.insert(9);
        String expicted = "{ 9 } ->{ 6 } ->{ 5 } ->NULL";
        assertEquals("the output is", expicted, newLink.toString());
    }

    @Test
    public void testIncludes() {
        LinkedList l = new LinkedList();
        l.insert(5);
        l.insert(6);
        l.insert(9);
        assertTrue("the output is", l.includes(5));
    }

// ----------------------------------------------------------


    @Test
    public void testAppend() {
        LinkedList test = new LinkedList();
        test.insert(2);
        test.append(14);
        test.append(1);
        String expicted1 = "{ 2 } ->{ 14 } ->{ 1 } ->NULL";
        assertEquals("the output is", expicted1, test.toString());
    }

    @Test
    public void testAddBefore() {
        LinkedList test = new LinkedList();
        test.insert(14);
        test.insert(7);
        test.insert(4);
        test.insert(6);
        test.insertBefore(14, 2);
        String expicted1 = "{ 6 } ->{ 4 } ->{ 7 } ->{ 2 } ->{ 14 } ->NULL";
        assertEquals("the output is", expicted1, test.toString());
    }

    @Test
    public void testAddAfter() {
        LinkedList test = new LinkedList();
        test.insert(2);
        test.insert(5);
        test.insert(4);
        test.insert(10);
        test.insertAfter(10, 3);
        String expicted1 = "{ 10 } ->{ 3 } ->{ 4 } ->{ 5 } ->{ 2 } ->NULL";
        assertEquals("the output is", expicted1, test.toString());
    }
// ----------------------------------------------------------

    @Test
    public void testKthFromEnd1() {
        LinkedList test = new LinkedList();
        test.insert(2);
        test.insert(8);
        test.insert(3);
        test.insert(1);
        assertEquals("the output is", "2", test.kthFromEnd(0));
    }

    @Test
    public void testKthFromEnd2() {
        LinkedList test = new LinkedList();
        test.insert(2);
        test.insert(8);
        test.insert(3);
        test.insert(1);
        assertEquals("the output is", "3", test.kthFromEnd(2));
    }
    @Test
    public void testKthFromEnd3() {
        LinkedList test = new LinkedList();
        test.insert(2);
        test.insert(8);
        test.insert(3);
        test.insert(1);
        assertEquals("the output is", "Exception", test.kthFromEnd(6));
    }

    // ----------------------------------------------------------
    @Test
    public void testZipLists1() {
        LinkedList test1 = new LinkedList();
        LinkedList test2 = new LinkedList();
        test1.insert(2);
        test1.insert(3);
        test1.insert(1);

        test2.insert(4);
        test2.insert(9);
        test2.insert(5);
        assertEquals("the output is", "{ 1 } ->{ 5 } ->{ 3 } ->{ 9 } ->{ 2 } ->{ 4 } ->null",LinkedList.zipLists(test1,test2).toString());

    }
    @Test
    public void testZipLists2() {
        LinkedList test1 = new LinkedList();
        LinkedList test2 = new LinkedList();
        test1.insert(3);
        test1.insert(1);

        test2.insert(4);
        test2.insert(9);
        test2.insert(5);
        assertEquals("the output is", "{ 1 } ->{ 5 } ->{ 3 } ->{ 9 } ->{ 4 } ->null",LinkedList.zipLists(test1,test2).toString());
    }
    @Test
    public void testZipLists3() {
        LinkedList test1 = new LinkedList();
        LinkedList test2 = new LinkedList();
        test1.insert(2);
        test1.insert(3);
        test1.insert(1);

        test2.insert(9);
        test2.insert(5);
        assertEquals("the output is", "{ 1 } ->{ 5 } ->{ 3 } ->{ 9 } ->{ 2 } ->null",LinkedList.zipLists(test1,test2).toString());
    }


}